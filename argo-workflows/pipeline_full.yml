apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: run-pipeline-
spec:
  serviceAccountName: workflow
  volumes:
    - name: dshm
      emptyDir:
        medium: Memory
        sizeLimit: 64Gi
  entrypoint: main
  arguments:
    parameters:
      - name: params-conf-list-translate-desc
        value: '[
            {"QUARTER": 1},
            {"QUARTER": 2},
            {"QUARTER": 3}
            ]'
      - name: params-conf-list-predictions
        value: '[
            {"QUARTER": 1},
            {"QUARTER": 2},
            {"QUARTER": 3}
            ]'

  templates:
    - name: main
      dag:
        tasks:
        # Task 1
          - name: run-detect-lang
            template: run-detect-lang
     
        # Task 2a
          - name: run-translate-desc-en
            dependencies: [ run-detect-lang ]
            template: run-translate-desc-en
            arguments:
              parameters:
                - name: QUARTER
                  value: "{{item.QUARTER}}"
            # Pass the inputs to the task using "withParam"
            withParam: "{{workflow.parameters.params-conf-list-translate-desc}}"

        # Task 2b
          - name: run-translate-desc
            dependencies: [ run-detect-lang ]
            template: run-translate-desc


        # Task 3
          - name: run-prompts
            dependencies: [ run-translate-desc-en, run-translate-desc ]
            template: run-prompts


        # Task 4a
          - name: run-predictions-en
            dependencies: [ run-prompts ]
            template: run-predictions-en
            arguments:
              parameters:
                - name: QUARTER
                  value: "{{item.QUARTER}}"
            # Pass the inputs to the task using "withParam"
            withParam: "{{workflow.parameters.params-conf-list-predictions}}"

        # Task 4b
          - name: run-predictions
            dependencies: [ run-prompts ]
            template: run-predictions


        # Task 5
          - name: run-retry
            dependencies: [ run-predictions-en, run-predictions ]
            template: run-retry



    # Worker template 1
    - name: run-detect-lang
      nodeSelector:
        nvidia.com/gpu.product: "NVIDIA-H100-PCIe"
      container:
        image: thomasfaria/classif-win-challenge:main
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            nvidia.com/gpu: 1
        command: ["/bin/bash", -c]
        args:
          - |
            git clone https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/${GIT_USERNAME}/classif-win-challenge.git &&
            cd classif-win-challenge/ &&
            pip install -r requirements.txt &&
            huggingface-cli login --token $HF_TOKEN &&
            python 1-detect-language.py

        volumeMounts:
          - mountPath: /dev/shm
            name: dshm
        env:
          # env var for s3 connexion
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: accessKey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: secretKey
          - name: AWS_DEFAULT_REGION
            value: us-east-1
          - name: AWS_S3_ENDPOINT
            value: minio.lab.sspcloud.fr
          - name: HF_TOKEN
            valueFrom:
              secretKeyRef:
                name: hf-token
                key: token
          - name: GIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: github-info
                key: username
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-info
                key: token

    - name: run-translate-desc-en
      inputs:
          parameters:
            - name: QUARTER
      nodeSelector:
        nvidia.com/gpu.product: "NVIDIA-H100-PCIe"
      container:
        image: thomasfaria/classif-win-challenge:main
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            nvidia.com/gpu: 1
        command: ["/bin/bash", -c]
        args:
          - |
            git clone https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/${GIT_USERNAME}/classif-win-challenge.git &&
            cd classif-win-challenge/ &&
            pip install -r requirements.txt &&
            huggingface-cli login --token $HF_TOKEN &&
            export MC_HOST_s3=https://$AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY@$AWS_S3_ENDPOINT &&
            python 2-translate-descriptions.py --description_col description_clean --title_col title_clean --languages en --quarter {{inputs.parameters.QUARTER}}

        volumeMounts:
          - mountPath: /dev/shm
            name: dshm
        env:
          # env var for s3 connexion
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: accessKey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: secretKey
          - name: AWS_DEFAULT_REGION
            value: us-east-1
          - name: AWS_S3_ENDPOINT
            value: minio.lab.sspcloud.fr
          - name: HF_TOKEN
            valueFrom:
              secretKeyRef:
                name: hf-token
                key: token
          - name: GIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: github-info
                key: username
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-info
                key: token

    - name: run-translate-desc
      nodeSelector:
        nvidia.com/gpu.product: "NVIDIA-H100-PCIe"
      container:
        image: thomasfaria/classif-win-challenge:main
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            nvidia.com/gpu: 1
        command: ["/bin/bash", -c]
        args:
          - |
            git clone https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/${GIT_USERNAME}/classif-win-challenge.git &&
            cd classif-win-challenge/ &&
            pip install -r requirements.txt &&
            huggingface-cli login --token $HF_TOKEN &&
            export MC_HOST_s3=https://$AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY@$AWS_S3_ENDPOINT &&
            python 2-translate-descriptions.py --description_col description_clean --title_col title_clean --languages \
              bg cs da de el es et fi fr ga hr hu it lt lv mt nl pl pt ro sk sl sv un
        volumeMounts:
          - mountPath: /dev/shm
            name: dshm
        env:
          # env var for s3 connexion
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: accessKey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: secretKey
          - name: AWS_DEFAULT_REGION
            value: us-east-1
          - name: AWS_S3_ENDPOINT
            value: minio.lab.sspcloud.fr
          - name: HF_TOKEN
            valueFrom:
              secretKeyRef:
                name: hf-token
                key: token
          - name: GIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: github-info
                key: username
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-info
                key: token

    - name: run-prompts
      nodeSelector:
        nvidia.com/gpu.product: "NVIDIA-H100-PCIe"
      container:
        image: thomasfaria/classif-win-challenge:main
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            nvidia.com/gpu: 1
        command: ["/bin/bash", -c]
        args:
          - |
            git clone https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/${GIT_USERNAME}/classif-win-challenge.git &&
            cd classif-win-challenge/ &&
            pip install -r requirements.txt &&
            python 3-build-vdb.py --title_col "title_en" --description_col "description_en" --languages \
              un en de bg hr da es et fi fr el hu ga it lv lt mt nl pl pt ro sk sl sv cs

        volumeMounts:
          - mountPath: /dev/shm
            name: dshm
        env:
          # env var for s3 connexion
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: accessKey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: secretKey
          - name: AWS_DEFAULT_REGION
            value: us-east-1
          - name: AWS_S3_ENDPOINT
            value: minio.lab.sspcloud.fr
          - name: HF_TOKEN
            valueFrom:
              secretKeyRef:
                name: hf-token
                key: token
          - name: GIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: github-info
                key: username
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-info
                key: token

    - name: run-predictions-en
      inputs:
          parameters:
            - name: QUARTER
      nodeSelector:
        nvidia.com/gpu.product: "NVIDIA-H100-PCIe"
      container:
        image: thomasfaria/classif-win-challenge:main
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            nvidia.com/gpu: 1
        command: ["/bin/bash", -c]
        args:
          - |
            git clone https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/${GIT_USERNAME}/classif-win-challenge.git &&
            cd classif-win-challenge/ &&
            pip install -r requirements.txt &&
            huggingface-cli login --token $HF_TOKEN &&
            export MC_HOST_s3=https://$AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY@$AWS_S3_ENDPOINT &&
            python 4-classif-llm.py --languages en --quarter {{inputs.parameters.QUARTER}}

        volumeMounts:
          - mountPath: /dev/shm
            name: dshm
        env:
          # env var for s3 connexion
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: accessKey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: secretKey
          - name: AWS_DEFAULT_REGION
            value: us-east-1
          - name: AWS_S3_ENDPOINT
            value: minio.lab.sspcloud.fr
          - name: HF_TOKEN
            valueFrom:
              secretKeyRef:
                name: hf-token
                key: token
          - name: GIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: github-info
                key: username
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-info
                key: token

    - name: run-predictions
      nodeSelector:
        nvidia.com/gpu.product: "NVIDIA-H100-PCIe"
      container:
        image: thomasfaria/classif-win-challenge:main
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            nvidia.com/gpu: 1
        command: ["/bin/bash", -c]
        args:
          - |
            git clone https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/${GIT_USERNAME}/classif-win-challenge.git &&
            cd classif-win-challenge/ &&
            pip install -r requirements.txt &&
            huggingface-cli login --token $HF_TOKEN &&
            export MC_HOST_s3=https://$AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY@$AWS_S3_ENDPOINT &&
            python 4-classif-llm.py --languages bg cs da de el es et fi fr ga hr hu it lt lv mt nl pl pt ro sk sl sv un

        volumeMounts:
          - mountPath: /dev/shm
            name: dshm
        env:
          # env var for s3 connexion
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: accessKey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: secretKey
          - name: AWS_DEFAULT_REGION
            value: us-east-1
          - name: AWS_S3_ENDPOINT
            value: minio.lab.sspcloud.fr
          - name: HF_TOKEN
            valueFrom:
              secretKeyRef:
                name: hf-token
                key: token
          - name: GIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: github-info
                key: username
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-info
                key: token


    - name: run-retry
      nodeSelector:
        nvidia.com/gpu.product: "NVIDIA-H100-PCIe"
      container:
        image: thomasfaria/classif-win-challenge:main
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            nvidia.com/gpu: 1
        command: ["/bin/bash", -c]
        args:
          - |
            git clone https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/${GIT_USERNAME}/classif-win-challenge.git &&
            cd classif-win-challenge/ &&
            pip install -r requirements.txt &&
            huggingface-cli login --token $HF_TOKEN &&
            export MC_HOST_s3=https://$AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY@$AWS_S3_ENDPOINT &&
            python 5-retry-classif.py --max_retry 3

        volumeMounts:
          - mountPath: /dev/shm
            name: dshm
        env:
          # env var for s3 connexion
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: accessKey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: secretKey
          - name: AWS_DEFAULT_REGION
            value: us-east-1
          - name: AWS_S3_ENDPOINT
            value: minio.lab.sspcloud.fr
          - name: HF_TOKEN
            valueFrom:
              secretKeyRef:
                name: hf-token
                key: token
          - name: GIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: github-info
                key: username
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-info
                key: token
